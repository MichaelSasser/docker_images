---
name: Build base

on:
  schedule: [{ cron: '0 12 */7 * *' }]
  push:
    branches: [master]
    paths:
      - '.github/workflows/build-base.yml'
      - 'linux/ubuntu/act/**'
      - 'linux/ubuntu/scripts/**'
  workflow_dispatch:

env:
  SLUG: ${{ github.repository_owner }}/ubuntu
  SLUG_QUAY: ${{ vars.USERNAME_QUAY && format('{0}/ubuntu', vars.USERNAME_QUAY) || '' }}
  SLUG_DOCKER: ${{ vars.USERNAME_DOCKER && format('{0}/ubuntu', vars.USERNAME_DOCKER) || '' }}
  DISTRO: ubuntu
  NODE: '18 20 22'
  BUILD_REF: ${{ github.sha }}
  PUSH_GHCR: ${{ github.repository == (github.event.pull_request.head.repo.full_name || github.repository) && '1' || '' }}
  PUSH_QUAY: ${{ secrets.QUAY_USER && secrets.QUAY_TOKEN && '1' || '' }}
  PUSH_DOCKER_HUB: ${{ secrets.DOCKER_USER && secrets.DOCKER_TOKEN && '1' || '' }}
  LATEST_TAG: 24.04

jobs:
  base-amd64:
    name: Build base (amd64)
    runs-on: ubuntu-latest
    env:
      ARCH: amd64
      PLATFORM: linux/amd64
    outputs:
      tag: ${{ steps.stamp.outputs.tag }}
      part_tag: ${{ steps.stamp.outputs.part_tag }}
      is_release: ${{ steps.stamp.outputs.is_release }}
      release_tag: ${{ steps.stamp.outputs.release_tag }}
      build_date: ${{ steps.stamp.outputs.build_date }}
      tmp_ref: ${{ steps.record.outputs.tmp_ref }}
      tmp_tag: ${{ steps.record.outputs.tmp_tag }}
      digest: ${{ steps.record.outputs.digest }}
    steps:
      - uses: actions/checkout@v5

      - uses: actions/github-script@v8
        with:
          github-token: n/a
          script: core.exportVariable('SLUG', process.env.SLUG.toLowerCase());

      - name: Stamp
        id: stamp
        env:
          TAG: ${{ env.LATEST_TAG }}
        run: |
          set -Eeuo pipefail

          TAG="${TAG}"

          if [[ "${{ env.LATEST_TAG }}" == "${TAG}" ]]; then
            RELEASE_TAG=$(lsb_release -rs)
          else
            RELEASE_TAG="${TAG}"
          fi

          if [[ "${{ github.event_name }}" == "schedule" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            PART_TAG=$(date +%Y%m%d)
            IS_RELEASE=1
          else
            PART_TAG=dev
            IS_RELEASE=0
          fi

          BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          TMP_TAG="act-${TAG}-${PART_TAG}-tmp-${{ github.run_id }}-${ARCH}"
          TMP_REF="ghcr.io/${SLUG}:${TMP_TAG}"

          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV
          echo "PART_TAG=${PART_TAG}" >> $GITHUB_ENV
          echo "IS_RELEASE=${IS_RELEASE}" >> $GITHUB_ENV
          echo "BUILD_DATE=${BUILD_DATE}" >> $GITHUB_ENV
          echo "BUILD_TAG=act-${TAG}" >> $GITHUB_ENV
          echo "TMP_TAG=${TMP_TAG}" >> $GITHUB_ENV
          echo "TMP_REF=${TMP_REF}" >> $GITHUB_ENV

          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "part_tag=${PART_TAG}" >> $GITHUB_OUTPUT
          echo "is_release=${IS_RELEASE}" >> $GITHUB_OUTPUT
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
          echo "tmp_tag=${TMP_TAG}" >> $GITHUB_OUTPUT
          echo "tmp_ref=${TMP_REF}" >> $GITHUB_OUTPUT

      - uses: docker/setup-buildx-action@v3

      - if: env.PUSH_GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: '${{ github.actor }}'
          password: '${{ github.token }}'

      - if: env.PUSH_QUAY
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: '${{ secrets.QUAY_USER }}'
          password: '${{ secrets.QUAY_TOKEN }}'

      - if: env.PUSH_DOCKER_HUB
        uses: docker/login-action@v3
        with:
          username: '${{ secrets.DOCKER_USER }}'
          password: '${{ secrets.DOCKER_TOKEN }}'

      - name: Build act base
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./linux/ubuntu/act
          platforms: ${{ env.PLATFORM }}
          pull: true
          push: true
          provenance: false
          sbom: false
          tags: ${{ env.TMP_REF }}
          build-args: |
            BUILD_DATE=${{ env.BUILD_DATE }}
            BUILD_REF=${{ env.BUILD_REF }}
            BUILD_TAG=${{ env.BUILD_TAG }}
            BUILD_TAG_VERSION=${{ env.PART_TAG }}
            BUILD_OWNER=${{ github.repository_owner }}
            BUILD_REPO=${{ github.repository }}
            DISTRO=${{ env.DISTRO }}
            FROM_IMAGE=buildpack-deps
            FROM_TAG=${{ env.RELEASE_TAG }}
            NODE=${{ env.NODE }}
            NODE_VERSION=${{ env.NODE }}
            RUNNER=root
            TYPE=act
          cache-from: type=registry,ref=ghcr.io/${{ env.SLUG }}:cache-act-${{ env.ARCH }}
          cache-to: type=registry,ref=ghcr.io/${{ env.SLUG }}:cache-act-${{ env.ARCH }},mode=max

      - name: Record outputs
        id: record
        env:
          TMP_REF: ${{ env.TMP_REF }}
          TMP_TAG: ${{ env.TMP_TAG }}
          DIGEST: ${{ steps.build.outputs.digest }}
          ARCH: ${{ env.ARCH }}
        run: |
          set -Eeuo pipefail
          echo "tmp_ref=${TMP_REF}" >> $GITHUB_OUTPUT
          echo "tmp_tag=${TMP_TAG}" >> $GITHUB_OUTPUT
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
          echo "arch=${ARCH}" >> $GITHUB_OUTPUT

  base-arm64:
    name: Build base (arm64)
    runs-on: ubuntu-24.04-arm
    env:
      ARCH: arm64
      PLATFORM: linux/arm64
    outputs:
      tag: ${{ steps.stamp.outputs.tag }}
      part_tag: ${{ steps.stamp.outputs.part_tag }}
      is_release: ${{ steps.stamp.outputs.is_release }}
      release_tag: ${{ steps.stamp.outputs.release_tag }}
      build_date: ${{ steps.stamp.outputs.build_date }}
      tmp_ref: ${{ steps.record.outputs.tmp_ref }}
      tmp_tag: ${{ steps.record.outputs.tmp_tag }}
      digest: ${{ steps.record.outputs.digest }}
    steps:
      - uses: actions/checkout@v5

      - uses: actions/github-script@v8
        with:
          github-token: n/a
          script: core.exportVariable('SLUG', process.env.SLUG.toLowerCase());

      - name: Stamp
        id: stamp
        env:
          TAG: ${{ env.LATEST_TAG }}
        run: |
          set -Eeuo pipefail

          TAG="${TAG}"

          if [[ "${{ env.LATEST_TAG }}" == "${TAG}" ]]; then
            RELEASE_TAG=$(lsb_release -rs)
          else
            RELEASE_TAG="${TAG}"
          fi

          if [[ "${{ github.event_name }}" == "schedule" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            PART_TAG=$(date +%Y%m%d)
            IS_RELEASE=1
          else
            PART_TAG=dev
            IS_RELEASE=0
          fi

          BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          TMP_TAG="act-${TAG}-${PART_TAG}-tmp-${{ github.run_id }}-${ARCH}"
          TMP_REF="ghcr.io/${SLUG}:${TMP_TAG}"

          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV
          echo "PART_TAG=${PART_TAG}" >> $GITHUB_ENV
          echo "IS_RELEASE=${IS_RELEASE}" >> $GITHUB_ENV
          echo "BUILD_DATE=${BUILD_DATE}" >> $GITHUB_ENV
          echo "BUILD_TAG=act-${TAG}" >> $GITHUB_ENV
          echo "TMP_TAG=${TMP_TAG}" >> $GITHUB_ENV
          echo "TMP_REF=${TMP_REF}" >> $GITHUB_ENV

          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "part_tag=${PART_TAG}" >> $GITHUB_OUTPUT
          echo "is_release=${IS_RELEASE}" >> $GITHUB_OUTPUT
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
          echo "tmp_tag=${TMP_TAG}" >> $GITHUB_OUTPUT
          echo "tmp_ref=${TMP_REF}" >> $GITHUB_OUTPUT

      - uses: docker/setup-buildx-action@v3

      - if: env.PUSH_GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: '${{ github.actor }}'
          password: '${{ github.token }}'

      - if: env.PUSH_QUAY
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: '${{ secrets.QUAY_USER }}'
          password: '${{ secrets.QUAY_TOKEN }}'

      - if: env.PUSH_DOCKER_HUB
        uses: docker/login-action@v3
        with:
          username: '${{ secrets.DOCKER_USER }}'
          password: '${{ secrets.DOCKER_TOKEN }}'

      - name: Build act base
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./linux/ubuntu/act
          platforms: ${{ env.PLATFORM }}
          pull: true
          push: true
          provenance: false
          sbom: false
          tags: ${{ env.TMP_REF }}
          build-args: |
            BUILD_DATE=${{ env.BUILD_DATE }}
            BUILD_REF=${{ env.BUILD_REF }}
            BUILD_TAG=${{ env.BUILD_TAG }}
            BUILD_TAG_VERSION=${{ env.PART_TAG }}
            BUILD_OWNER=${{ github.repository_owner }}
            BUILD_REPO=${{ github.repository }}
            DISTRO=${{ env.DISTRO }}
            FROM_IMAGE=buildpack-deps
            FROM_TAG=${{ env.RELEASE_TAG }}
            NODE=${{ env.NODE }}
            NODE_VERSION=${{ env.NODE }}
            RUNNER=root
            TYPE=act
          cache-from: type=registry,ref=ghcr.io/${{ env.SLUG }}:cache-act-${{ env.ARCH }}
          cache-to: type=registry,ref=ghcr.io/${{ env.SLUG }}:cache-act-${{ env.ARCH }},mode=max

      - name: Record outputs
        id: record
        env:
          TMP_REF: ${{ env.TMP_REF }}
          TMP_TAG: ${{ env.TMP_TAG }}
          DIGEST: ${{ steps.build.outputs.digest }}
          ARCH: ${{ env.ARCH }}
        run: |
          set -Eeuo pipefail
          echo "tmp_ref=${TMP_REF}" >> $GITHUB_OUTPUT
          echo "tmp_tag=${TMP_TAG}" >> $GITHUB_OUTPUT
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
          echo "arch=${ARCH}" >> $GITHUB_OUTPUT

  base-merge:
    name: Publish base manifests ${{ needs.base-amd64.outputs.tag }}
    needs:
      - base-amd64
      - base-arm64
    runs-on: ubuntu-latest
    if: ${{ needs.base-amd64.outputs.tmp_ref && needs.base-arm64.outputs.tmp_ref }}
    env:
      TAG: ${{ needs.base-amd64.outputs.tag }}
      PART_TAG: ${{ needs.base-amd64.outputs.part_tag }}
      IS_RELEASE: ${{ needs.base-amd64.outputs.is_release }}
      RELEASE_TAG: ${{ needs.base-amd64.outputs.release_tag }}
      BUILD_DATE: ${{ needs.base-amd64.outputs.build_date }}
      TMP_REF_AMD64: ${{ needs.base-amd64.outputs.tmp_ref }}
      TMP_TAG_AMD64: ${{ needs.base-amd64.outputs.tmp_tag }}
      TMP_REF_ARM64: ${{ needs.base-arm64.outputs.tmp_ref }}
      TMP_TAG_ARM64: ${{ needs.base-arm64.outputs.tmp_tag }}
      PRIMARY_TAG: act-${{ needs.base-amd64.outputs.tag }}-${{ needs.base-amd64.outputs.part_tag }}
    outputs:
      base_digest: ${{ steps.digest.outputs.base_digest }}
      base_ref: ${{ steps.digest.outputs.base_ref }}
      part_tag: ${{ env.PART_TAG }}
      is_release: ${{ env.IS_RELEASE }}
      tag: ${{ env.TAG }}
    steps:
      - uses: actions/checkout@v5

      - uses: actions/github-script@v8
        with:
          github-token: n/a
          script: core.exportVariable('SLUG', process.env.SLUG.toLowerCase());

      - uses: docker/setup-buildx-action@v3

      - if: env.PUSH_GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: '${{ github.actor }}'
          password: '${{ github.token }}'

      - if: env.PUSH_QUAY
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: '${{ secrets.QUAY_USER }}'
          password: '${{ secrets.QUAY_TOKEN }}'

      - if: env.PUSH_DOCKER_HUB
        uses: docker/login-action@v3
        with:
          username: '${{ secrets.DOCKER_USER }}'
          password: '${{ secrets.DOCKER_TOKEN }}'

      - name: Create multi-arch manifest
        run: |
          set -Eeuo pipefail
          PRIMARY_REF="ghcr.io/${SLUG}:${PRIMARY_TAG}"
          docker buildx imagetools create --tag "${PRIMARY_REF}" "${TMP_REF_AMD64}" "${TMP_REF_ARM64}"
          echo "PRIMARY_REF=${PRIMARY_REF}" >> $GITHUB_ENV

      - name: Inspect manifest digest
        id: digest
        run: |
          set -Eeuo pipefail
          DIGEST=$(docker buildx imagetools inspect "${PRIMARY_REF}" | awk '/Digest:/ {print $2; exit}')
          PRIMARY_REF_DIGEST="${PRIMARY_REF}@${DIGEST}"
          echo "PRIMARY_DIGEST=${DIGEST}" >> $GITHUB_ENV
          echo "PRIMARY_REF_DIGEST=${PRIMARY_REF_DIGEST}" >> $GITHUB_ENV
          echo "base_digest=${DIGEST}" >> $GITHUB_OUTPUT
          echo "base_ref=${PRIMARY_REF_DIGEST}" >> $GITHUB_OUTPUT

      - name: Tag and push manifests
        env:
          TAG: ${{ env.TAG }}
          PART_TAG: ${{ env.PART_TAG }}
          IS_RELEASE: ${{ env.IS_RELEASE }}
          PRIMARY_TAG: ${{ env.PRIMARY_TAG }}
          PRIMARY_REF_DIGEST: ${{ env.PRIMARY_REF_DIGEST }}
          SLUG: ${{ env.SLUG }}
          SLUG_QUAY: ${{ env.SLUG_QUAY }}
          SLUG_DOCKER: ${{ env.SLUG_DOCKER }}
          PUSH_GHCR: ${{ env.PUSH_GHCR }}
          PUSH_QUAY: ${{ env.PUSH_QUAY }}
          PUSH_DOCKER_HUB: ${{ env.PUSH_DOCKER_HUB }}
        run: |
          set -Eeuo pipefail

          declare -a TAG_SUFFIXES=(
            "${PRIMARY_TAG}"
            "act-latest-${PART_TAG}"
          )

          if [[ "${IS_RELEASE}" == "1" ]]; then
            TAG_SUFFIXES+=("act-${TAG}" "act-latest" "act-${TAG}-dev")
          else
            TAG_SUFFIXES+=("act-${TAG}-dev")
          fi

          TAG_SUFFIXES+=("act-latest-dev")

          mapfile -t UNIQUE_TAGS < <(printf '%s\n' "${TAG_SUFFIXES[@]}" | awk '!seen[$0]++')

          declare -a GHCR_TAGS=()
          for tag in "${UNIQUE_TAGS[@]}"; do
            if [[ "${tag}" != "${PRIMARY_TAG}" ]]; then
              GHCR_TAGS+=("${tag}")
            fi
          done

          printf -v TAG_SUFFIXES_STR '%s ' "${UNIQUE_TAGS[@]}"
          echo "TAG_SUFFIXES=${TAG_SUFFIXES_STR% }" >> $GITHUB_ENV

          push_tags() {
            local prefix="$1"
            local enabled="$2"
            shift 2

            if [[ -z "${enabled}" ]]; then
              return 0
            fi

            if [[ $# -eq 0 ]]; then
              return 0
            fi

            local args=()
            for tag in "$@"; do
              args+=("--tag" "${prefix}:${tag}")
            done
            args+=("${PRIMARY_REF_DIGEST}")

            local attempt=1
            local max_attempts=3
            while [[ ${attempt} -le ${max_attempts} ]]; do
              if docker buildx imagetools create "${args[@]}"; then
                return 0
              fi
              if [[ ${attempt} -eq ${max_attempts} ]]; then
                echo "Warning: failed to push tags for ${prefix} after ${max_attempts} attempts" >&2
                return 0
              fi
              echo "Retrying push for ${prefix} (attempt ${attempt})" >&2
              sleep $((attempt * 10))
              attempt=$((attempt + 1))
            done
          }

          push_tags "ghcr.io/${SLUG}" "${PUSH_GHCR}" "${GHCR_TAGS[@]}"

          if [[ -n "${SLUG_QUAY}" ]]; then
            push_tags "quay.io/${SLUG_QUAY}" "${PUSH_QUAY}" "${UNIQUE_TAGS[@]}"
          fi

          if [[ -n "${SLUG_DOCKER}" ]]; then
            push_tags "docker.io/${SLUG_DOCKER}" "${PUSH_DOCKER_HUB}" "${UNIQUE_TAGS[@]}"
          fi

      - name: Cleanup temporary tags
        run: |
          docker buildx imagetools rm "${TMP_REF_AMD64}" || true
          docker buildx imagetools rm "${TMP_REF_ARM64}" || true

      - name: Write base metadata
        run: |
          python - <<'PY'
            import json
            import os

            tags = os.environ["TAG_SUFFIXES"].split()

            data = {
                "tag": os.environ["TAG"],
                "part_tag": os.environ["PART_TAG"],
                "release_tag": os.environ["RELEASE_TAG"],
                "digest": os.environ["PRIMARY_DIGEST"],
                "ref": os.environ["PRIMARY_REF"],
                "is_release": os.environ["IS_RELEASE"] == "1",
                "tags": tags
            }

            with open("base-metadata.json", "w", encoding="utf-8") as fh:
                json.dump(data, fh)
          PY
        env:
          TAG: ${{ env.TAG }}
          PART_TAG: ${{ env.PART_TAG }}
          RELEASE_TAG: ${{ env.RELEASE_TAG }}
          PRIMARY_DIGEST: ${{ env.PRIMARY_DIGEST }}
          PRIMARY_REF: ${{ env.PRIMARY_REF }}
          IS_RELEASE: ${{ env.IS_RELEASE }}
          TAG_SUFFIXES: ${{ env.TAG_SUFFIXES }}

      - name: Persist base metadata
        uses: actions/upload-artifact@v4
        with:
          name: base-${{ env.TAG }}
          path: base-metadata.json
          retention-days: 7
